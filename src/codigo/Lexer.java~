/* The following code was generated by JFlex 1.4.3 on 31/03/23 07:34 AM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/03/23 07:34 AM from the specification file
 * <tt>C:/Users/YOGA/Desktop/JL7/Progrmas Aprender Java/Proyecto_Compi/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\10\1\3\1\5\1\0\1\7\1\3\22\0\1\3\1\54"+
    "\1\11\1\50\1\0\1\51\1\52\1\0\1\57\1\60\1\47\1\45"+
    "\1\3\1\46\1\67\1\4\12\2\1\0\1\66\1\56\1\44\1\55"+
    "\2\0\13\1\1\43\1\1\1\36\4\1\1\31\1\1\1\42\5\1"+
    "\1\63\1\0\1\64\1\0\1\1\1\0\1\20\1\23\1\26\1\21"+
    "\1\24\1\15\1\25\1\27\1\12\1\65\1\41\1\16\1\40\1\13"+
    "\1\17\1\35\1\1\1\30\1\32\1\14\1\22\1\6\1\33\1\37"+
    "\1\34\1\1\1\61\1\53\1\62\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\22\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\3\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\2\1\31\1\32\1\4\1\33\2\2"+
    "\1\34\17\2\1\35\32\2\1\22\1\36\1\0\1\37"+
    "\1\21\1\0\2\2\1\40\2\2\1\41\4\2\1\42"+
    "\1\2\1\43\30\2\1\44\13\2\2\0\1\2\1\45"+
    "\4\2\1\46\1\47\1\2\1\50\1\51\1\52\1\53"+
    "\1\54\6\2\1\55\3\2\1\56\1\57\17\2\1\60"+
    "\1\61\1\62\1\0\1\3\4\2\1\0\1\2\1\63"+
    "\3\2\1\64\1\2\1\65\1\66\1\2\1\67\1\70"+
    "\7\2\1\71\1\2\1\72\3\2\2\0\1\2\1\73"+
    "\2\2\2\74\1\75\4\2\1\76\1\77\2\2\1\100"+
    "\1\101\1\102\1\2\2\0\3\2\1\103\3\2\1\104"+
    "\1\0\2\2\2\0\2\2\1\105\1\2\1\106\1\2"+
    "\2\0\3\2\1\107\1\0\1\2\1\110\2\2\1\111"+
    "\1\0\1\111\1\2\1\112\1\0\2\2\1\113\1\0"+
    "\2\2\1\0\1\2\1\114\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\u0150"+
    "\0\70\0\70\0\70\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268"+
    "\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428"+
    "\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8"+
    "\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0578\0\u0738\0\u0770"+
    "\0\u07a8\0\70\0\70\0\70\0\70\0\70\0\u07e0\0\70"+
    "\0\70\0\u0818\0\70\0\u0850\0\u0888\0\160\0\u08c0\0\u08f8"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8"+
    "\0\70\0\70\0\u11f0\0\70\0\70\0\u1228\0\u1260\0\u1298"+
    "\0\160\0\u12d0\0\u1308\0\160\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\160\0\u1420\0\160\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\160\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\160"+
    "\0\160\0\u1dc0\0\160\0\160\0\160\0\160\0\160\0\u1df8"+
    "\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\160\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\160\0\160\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0"+
    "\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290"+
    "\0\u22c8\0\u2300\0\160\0\160\0\160\0\u2338\0\70\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u1d88\0\u24c0\0\u24f8"+
    "\0\u2530\0\160\0\u2568\0\160\0\160\0\u25a0\0\160\0\160"+
    "\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\160"+
    "\0\u2760\0\160\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0"+
    "\0\160\0\u28e8\0\u2920\0\70\0\160\0\160\0\u2958\0\u2990"+
    "\0\u29c8\0\u2a00\0\160\0\160\0\u2a38\0\u2a70\0\160\0\160"+
    "\0\160\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\160"+
    "\0\u2bf8\0\u2c30\0\u2c68\0\160\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48"+
    "\0\u2d80\0\u2db8\0\u2df0\0\160\0\u2e28\0\160\0\u2e60\0\u2e98"+
    "\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\70\0\u2fb0\0\u2fe8\0\160"+
    "\0\u3020\0\u3058\0\70\0\u3090\0\160\0\u30c8\0\160\0\u3100"+
    "\0\u3138\0\u3170\0\160\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\160\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410"+
    "\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\3"+
    "\1\21\1\22\1\23\1\24\1\25\1\3\1\26\1\3"+
    "\1\27\1\30\1\31\1\32\1\3\1\33\1\34\1\3"+
    "\1\35\3\3\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\71\0\2\3"+
    "\3\0\1\3\3\0\32\3\21\0\1\3\4\0\1\4"+
    "\70\0\1\5\70\0\1\62\37\0\1\63\24\0\2\3"+
    "\3\0\1\3\3\0\5\3\1\64\24\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\1\3\1\65\1\3"+
    "\1\66\22\3\1\67\3\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\6\3\1\70\3\3\1\71\17\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\1\72"+
    "\14\3\1\73\1\74\13\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\4\3\1\75\1\76\1\77\11\3"+
    "\1\100\2\3\1\101\6\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\5\3\1\102\4\3\1\103\17\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\16\3"+
    "\1\104\1\3\1\105\11\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\5\3\1\106\4\3\1\107\17\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\110\2\3\1\111\6\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\16\3\1\112\13\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\4\3\1\113\25\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\2\3"+
    "\1\114\1\3\1\115\1\116\1\117\6\3\1\120\14\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\1\121"+
    "\4\3\1\122\4\3\1\123\17\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\2\3\1\124\11\3\1\125"+
    "\5\3\1\126\7\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\127\1\130\11\3\1\131\3\3"+
    "\1\100\1\132\1\3\1\101\6\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\15\3\1\133\14\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\10\3\1\134"+
    "\5\3\1\135\13\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\5\3\1\136\22\3\1\137\1\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\6\3\1\140"+
    "\23\3\21\0\1\3\46\0\1\141\67\0\1\63\1\142"+
    "\66\0\1\63\1\0\1\142\65\0\1\63\35\0\1\143"+
    "\72\0\1\144\3\0\1\144\4\0\1\144\3\0\1\144"+
    "\11\0\1\63\75\0\1\145\70\0\1\145\60\0\1\141"+
    "\10\0\1\141\56\0\1\141\11\0\1\141\57\0\1\146"+
    "\22\0\2\3\3\0\1\3\3\0\6\3\1\147\23\3"+
    "\21\0\1\3\2\0\5\62\1\0\62\62\1\0\2\3"+
    "\3\0\1\3\3\0\1\150\31\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\2\3\1\151\27\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\23\3\1\152"+
    "\6\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\26\3\1\153\3\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\21\3\1\154\3\3\1\155\4\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\26\3\1\156"+
    "\3\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\1\157\31\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\10\3\1\160\11\3\1\161\7\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\5\3\1\162\24\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\16\3"+
    "\1\163\13\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\4\3\1\164\25\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\14\3\1\131\15\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\16\3\1\165\13\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\166\30\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\3\3\1\167\26\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\13\3\1\170\16\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\20\3\1\171\2\3"+
    "\1\101\6\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\10\3\1\172\21\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\3\3\1\173\26\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\1\174\31\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\7\3\1\175"+
    "\22\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\12\3\1\176\17\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\20\3\1\177\11\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\22\3\1\200\7\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\6\3\1\201"+
    "\23\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\202\30\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\20\3\1\203\11\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\6\3\1\204\23\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\13\3\1\205"+
    "\16\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\2\3\1\206\27\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\2\3\1\207\27\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\210\13\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\6\3\1\211"+
    "\23\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\20\3\1\212\11\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\20\3\1\213\11\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\7\3\1\214\6\3\1\215"+
    "\13\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\6\3\1\216\23\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\1\217\31\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\1\220\31\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\11\3\1\221\20\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\1\222\4\3"+
    "\1\223\24\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\7\3\1\224\22\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\31\3\1\225\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\1\226\1\3\1\227\27\3"+
    "\21\0\1\3\15\0\1\230\56\0\1\231\66\0\2\3"+
    "\3\0\1\232\3\0\32\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\7\3\1\233\22\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\5\3\1\234\24\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\12\3"+
    "\1\235\17\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\236\27\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\12\3\1\237\17\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\20\3\1\240\11\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\12\3"+
    "\1\241\17\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\6\3\1\242\23\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\20\3\1\160\11\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\1\222\31\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\13\3\1\243"+
    "\16\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\2\3\1\244\27\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\245\3\0\14\3\1\246\3\3\1\247\11\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\12\3\1\250"+
    "\17\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\11\3\1\251\20\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\6\3\1\252\23\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\253\30\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\6\3\1\254"+
    "\23\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\6\3\1\255\23\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\12\3\1\256\17\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\23\3\1\156\6\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\20\3\1\257"+
    "\11\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\2\3\1\260\15\3\1\261\11\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\12\3\1\262\17\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\16\3\1\263"+
    "\13\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\15\3\1\264\14\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\6\3\1\265\23\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\10\3\1\266\21\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\1\267\31\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\270\30\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\271\27\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\23\3\1\101\6\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\1\272\3\3\1\273"+
    "\25\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\1\274\31\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\1\3\1\275\30\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\276\27\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\4\3\1\277\25\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\300\25\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\1\3\1\301\30\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\302\27\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\12\3\1\303\17\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\31\3"+
    "\1\304\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\305\30\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\15\3\1\237\14\3\21\0\1\3\30\0"+
    "\1\306\43\0\1\231\55\0\1\307\10\0\2\3\3\0"+
    "\1\3\3\0\6\3\1\310\23\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\311\13\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\20\3\1\312"+
    "\11\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\4\3\1\313\25\3\21\0\1\3\2\0\1\314\2\315"+
    "\2\314\1\0\1\315\3\314\32\315\21\314\1\315\2\314"+
    "\1\0\2\3\3\0\1\3\3\0\2\3\1\316\27\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\16\3"+
    "\1\317\13\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\4\3\1\320\25\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\10\3\1\321\21\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\13\3\1\322\16\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\2\3"+
    "\1\323\27\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\27\3\1\324\2\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\20\3\1\325\11\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\1\326\31\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\2\3\1\327"+
    "\27\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\2\3\1\330\27\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\2\3\1\331\27\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\332\13\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\1\3\1\333"+
    "\30\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\334\30\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\12\3\1\335\17\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\5\3\1\237\24\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\1\336\31\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\337\30\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\3\3\1\340\26\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\14\3\1\341\15\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\12\3\1\342\17\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\1\343"+
    "\31\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\2\3\1\344\27\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\12\3\1\345\17\3\21\0\1\3\20\0"+
    "\1\346\51\0\1\347\2\350\2\347\1\0\1\350\3\347"+
    "\32\350\21\347\1\350\2\347\1\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\351\27\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\23\3\1\352\6\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\1\353\31\3\21\0"+
    "\1\3\31\0\1\354\41\0\2\3\3\0\1\3\3\0"+
    "\15\3\1\355\14\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\2\3\1\237\27\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\12\3\1\356\17\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\4\3\1\357"+
    "\25\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\12\3\1\360\17\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\361\30\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\12\3\1\362\17\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\1\3\1\363"+
    "\30\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\13\3\1\364\16\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\12\3\1\365\17\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\26\3\1\366\3\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\11\3\1\237"+
    "\20\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\13\3\1\237\16\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\15\3\1\367\14\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\14\3\1\370\15\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\3\3\1\371"+
    "\26\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\14\3\1\372\15\3\21\0\1\3\24\0\1\373\67\0"+
    "\1\374\46\0\2\3\3\0\1\3\3\0\10\3\1\375"+
    "\21\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\6\3\1\376\23\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\377\30\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\2\3\1\u0100\27\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\15\3\1\u0101"+
    "\14\3\21\0\1\3\3\0\2\3\3\0\1\3\3\0"+
    "\10\3\1\u0102\21\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\4\3\1\u0103\25\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\u0104\13\3\21\0"+
    "\1\3\2\0\1\u0105\2\u0106\2\u0105\1\0\1\u0106\3\u0105"+
    "\32\u0106\21\u0105\1\u0106\2\u0105\1\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\u0107\27\3\21\0\1\3\23\0\1\u0108"+
    "\62\0\1\u0109\54\0\2\3\3\0\1\3\3\0\2\3"+
    "\1\u010a\27\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\14\3\1\u010b\15\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\12\3\1\u010c\17\3\21\0\1\3"+
    "\3\0\2\3\3\0\1\3\3\0\12\3\1\u010d\17\3"+
    "\21\0\1\3\3\0\2\3\3\0\1\3\3\0\12\3"+
    "\1\u010e\17\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\12\3\1\u010f\17\3\21\0\1\3\14\0\1\u0110"+
    "\4\0\1\u0111\51\0\2\3\3\0\1\3\3\0\1\u0112"+
    "\4\3\1\u0113\24\3\21\0\1\3\3\0\2\3\3\0"+
    "\1\3\3\0\12\3\1\u0114\17\3\21\0\1\3\26\0"+
    "\1\u0115\55\0\1\u0116\56\0\2\3\3\0\1\3\3\0"+
    "\1\u0117\31\3\21\0\1\3\3\0\2\3\3\0\1\3"+
    "\3\0\12\3\1\u0118\17\3\21\0\1\3\3\0\2\3"+
    "\3\0\1\3\3\0\1\u0119\31\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\3\3\1\u011a\26\3\21\0"+
    "\1\3\15\0\1\u011b\76\0\1\u011c\46\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\u011d\30\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\10\3\1\u011e\21\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\7\3\1\u011f"+
    "\22\3\21\0\1\3\20\0\1\u0120\52\0\2\3\3\0"+
    "\1\3\3\0\4\3\1\u0121\25\3\21\0\1\3\3\0"+
    "\2\3\3\0\1\3\3\0\13\3\1\u0122\16\3\21\0"+
    "\1\3\3\0\2\3\3\0\1\3\3\0\2\3\1\u0123"+
    "\27\3\21\0\1\3\16\0\1\u0124\54\0\2\3\3\0"+
    "\1\3\3\0\2\3\1\u0125\27\3\21\0\1\3\2\0"+
    "\5\354\1\0\63\354\2\355\2\354\1\0\1\355\3\354"+
    "\32\355\21\354\1\355\2\354\1\0\2\3\3\0\1\3"+
    "\3\0\15\3\1\u0126\14\3\21\0\1\3\2\0\5\u0127"+
    "\1\0\63\u0127\2\u0128\2\u0127\1\0\1\u0128\3\u0127\32\u0128"+
    "\21\u0127\1\u0128\2\u0127\1\0\2\3\3\0\1\3\3\0"+
    "\2\3\1\u0129\27\3\21\0\1\3\37\0\1\u012a\33\0"+
    "\2\3\3\0\1\3\3\0\23\3\1\u012b\6\3\21\0"+
    "\1\3\32\0\1\u012c\40\0\2\3\3\0\1\3\3\0"+
    "\16\3\1\u012d\13\3\21\0\1\3\14\0\1\u012e\56\0"+
    "\2\3\3\0\1\3\3\0\1\u012f\31\3\21\0\1\3"+
    "\15\0\1\u0130\55\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\u0131\30\3\21\0\1\3\16\0\1\u0132\54\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\u0133\27\3\21\0\1\3"+
    "\20\0\1\u0134\52\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\u0135\25\3\21\0\1\3\15\0\1\u0136\55\0\2\3"+
    "\3\0\1\3\3\0\1\3\1\371\30\3\21\0\1\3"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\3\11\36\1\5\11"+
    "\1\1\2\11\1\1\1\11\55\1\2\11\1\0\2\11"+
    "\1\0\61\1\2\0\54\1\1\0\1\11\4\1\1\0"+
    "\31\1\2\0\4\1\1\11\16\1\2\0\10\1\1\0"+
    "\2\1\2\0\6\1\2\0\3\1\1\11\1\0\4\1"+
    "\1\11\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { lexeme=yytext(); return Entero_largo;
          }
        case 77: break;
        case 58: 
          { lexeme=yytext(); return While;
          }
        case 78: break;
        case 60: 
          { lexeme = yytext(); return Librerias;
          }
        case 79: break;
        case 44: 
          { lexeme=yytext(); return Para_cad;
          }
        case 80: break;
        case 55: 
          { lexeme=yytext(); return Const;
          }
        case 81: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 82: break;
        case 53: 
          { lexeme=yytext(); return Break;
          }
        case 83: break;
        case 19: 
          { lexeme=yytext(); return Parentesis_a;
          }
        case 84: break;
        case 45: 
          { lexeme=yytext(); return Else;
          }
        case 85: break;
        case 51: 
          { lexeme=yytext(); return Decimal_simple;
          }
        case 86: break;
        case 36: 
          { lexeme=yytext(); return Std;
          }
        case 87: break;
        case 31: 
          { lexeme=yytext(); return Es_formato;
          }
        case 88: break;
        case 50: 
          { lexeme=yytext(); return Main;
          }
        case 89: break;
        case 59: 
          { lexeme=yytext(); return Import;
          }
        case 90: break;
        case 46: 
          { lexeme=yytext(); return Case;
          }
        case 91: break;
        case 47: 
          { lexeme=yytext(); return Caracter;
          }
        case 92: break;
        case 38: 
          { lexeme=yytext(); return This;
          }
        case 93: break;
        case 4: 
          { /*Ignore*/
          }
        case 94: break;
        case 52: 
          { lexeme=yytext(); return Using;
          }
        case 95: break;
        case 17: 
          { lexeme=yytext(); return Op_logico;
          }
        case 96: break;
        case 68: 
          { lexeme=yytext(); return Scanner;
          }
        case 97: break;
        case 22: 
          { lexeme=yytext(); return Llave_c;
          }
        case 98: break;
        case 71: 
          { lexeme=yytext(); return Directiva_incluir;
          }
        case 99: break;
        case 24: 
          { lexeme = yytext(); return Corchete_c;
          }
        case 100: break;
        case 1: 
          { return ERROR;
          }
        case 101: break;
        case 73: 
          { lexeme=yytext(); return system_in;
          }
        case 102: break;
        case 33: 
          { lexeme=yytext(); return New;
          }
        case 103: break;
        case 54: 
          { lexeme=yytext(); return Class;
          }
        case 104: break;
        case 39: 
          { lexeme = yytext(); return Op_booleano;
          }
        case 105: break;
        case 29: 
          { lexeme=yytext(); return Do;
          }
        case 106: break;
        case 25: 
          { lexeme=yytext(); return P_coma;
          }
        case 107: break;
        case 13: 
          { lexeme=yytext(); return Resta;
          }
        case 108: break;
        case 18: 
          { lexeme = yytext(); return Op_relacional;
          }
        case 109: break;
        case 37: 
          { lexeme=yytext(); return Void;
          }
        case 110: break;
        case 15: 
          { lexeme=yytext(); return Numeral;
          }
        case 111: break;
        case 66: 
          { lexeme = yytext();  return Impresion;
          }
        case 112: break;
        case 11: 
          { lexeme=yytext(); return Igual;
          }
        case 113: break;
        case 63: 
          { lexeme=yytext(); return Cadena;
          }
        case 114: break;
        case 76: 
          { lexeme=yytext(); return Updateheight;
          }
        case 115: break;
        case 12: 
          { lexeme=yytext(); return Suma;
          }
        case 116: break;
        case 30: 
          { lexeme = yytext(); return Op_incremento;
          }
        case 117: break;
        case 41: 
          { lexeme=yytext(); return Left;
          }
        case 118: break;
        case 27: 
          { lexeme = yytext(); return Op_atribucion;
          }
        case 119: break;
        case 75: 
          { lexeme=yytext(); return Rotateleft;
          }
        case 120: break;
        case 21: 
          { lexeme=yytext(); return Llave_a;
          }
        case 121: break;
        case 56: 
          { lexeme=yytext(); return Right;
          }
        case 122: break;
        case 62: 
          { lexeme=yytext(); return Return;
          }
        case 123: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 124: break;
        case 35: 
          { lexeme=yytext(); return For;
          }
        case 125: break;
        case 23: 
          { lexeme = yytext(); return Corchete_a;
          }
        case 126: break;
        case 61: 
          { lexeme=yytext(); return Decimal_doble;
          }
        case 127: break;
        case 26: 
          { lexeme=yytext(); return Punto;
          }
        case 128: break;
        case 28: 
          { lexeme=yytext(); return If;
          }
        case 129: break;
        case 16: 
          { lexeme=yytext(); return Porcentaje;
          }
        case 130: break;
        case 70: 
          { lexeme=yytext(); return Continue;
          }
        case 131: break;
        case 72: 
          { lexeme=yytext(); return Namespace;
          }
        case 132: break;
        case 49: 
          { lexeme=yytext(); return Null;
          }
        case 133: break;
        case 7: 
          { return Tab_vertical;
          }
        case 134: break;
        case 6: 
          { return Linea;
          }
        case 135: break;
        case 20: 
          { lexeme=yytext(); return Parentesis_c;
          }
        case 136: break;
        case 32: 
          { lexeme=yytext(); return Entero;
          }
        case 137: break;
        case 67: 
          { lexeme=yytext(); return Default;
          }
        case 138: break;
        case 65: 
          { lexeme=yytext(); return Public;
          }
        case 139: break;
        case 34: 
          { lexeme=yytext(); return Try;
          }
        case 140: break;
        case 9: 
          { return Retroceso;
          }
        case 141: break;
        case 64: 
          { lexeme=yytext(); return Switch;
          }
        case 142: break;
        case 10: 
          { lexeme=yytext(); return Comillas;
          }
        case 143: break;
        case 42: 
          { lexeme=yytext(); return Direccion_cad;
          }
        case 144: break;
        case 74: 
          { lexeme=yytext(); return Protected;
          }
        case 145: break;
        case 5: 
          { lexeme=yytext(); return Division;
          }
        case 146: break;
        case 43: 
          { lexeme=yytext(); return Numero_cad;
          }
        case 147: break;
        case 69: 
          { lexeme=yytext(); return Nextline;
          }
        case 148: break;
        case 8: 
          { return Avance_pag;
          }
        case 149: break;
        case 14: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 150: break;
        case 48: 
          { lexeme=yytext(); return Node;
          }
        case 151: break;
        case 57: 
          { lexeme = yytext();  return Analizador;
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
